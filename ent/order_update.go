// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/company"
	"github.com/mikestefanello/pagoda/ent/customer"
	"github.com/mikestefanello/pagoda/ent/order"
	"github.com/mikestefanello/pagoda/ent/orderitem"
	"github.com/mikestefanello/pagoda/ent/payment"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/staffmember"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetBalanceDue sets the "balance_due" field.
func (ou *OrderUpdate) SetBalanceDue(f float64) *OrderUpdate {
	ou.mutation.ResetBalanceDue()
	ou.mutation.SetBalanceDue(f)
	return ou
}

// SetNillableBalanceDue sets the "balance_due" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableBalanceDue(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetBalanceDue(*f)
	}
	return ou
}

// AddBalanceDue adds f to the "balance_due" field.
func (ou *OrderUpdate) AddBalanceDue(f float64) *OrderUpdate {
	ou.mutation.AddBalanceDue(f)
	return ou
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (ou *OrderUpdate) AddCustomerIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddCustomerIDs(ids...)
	return ou
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (ou *OrderUpdate) AddCustomer(c ...*Customer) *OrderUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddCustomerIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddOrderItemIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddOrderItemIDs(ids...)
	return ou
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) AddOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderItemIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (ou *OrderUpdate) AddPaymentIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddPaymentIDs(ids...)
	return ou
}

// AddPayments adds the "payments" edges to the Payment entity.
func (ou *OrderUpdate) AddPayments(p ...*Payment) *OrderUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPaymentIDs(ids...)
}

// AddProcessedByIDs adds the "processed_by" edge to the StaffMember entity by IDs.
func (ou *OrderUpdate) AddProcessedByIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddProcessedByIDs(ids...)
	return ou
}

// AddProcessedBy adds the "processed_by" edges to the StaffMember entity.
func (ou *OrderUpdate) AddProcessedBy(s ...*StaffMember) *OrderUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.AddProcessedByIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ou *OrderUpdate) SetCompanyID(id int) *OrderUpdate {
	ou.mutation.SetCompanyID(id)
	return ou
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableCompanyID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetCompanyID(*id)
	}
	return ou
}

// SetCompany sets the "company" edge to the Company entity.
func (ou *OrderUpdate) SetCompany(c *Company) *OrderUpdate {
	return ou.SetCompanyID(c.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (ou *OrderUpdate) ClearCustomer() *OrderUpdate {
	ou.mutation.ClearCustomer()
	return ou
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (ou *OrderUpdate) RemoveCustomerIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveCustomerIDs(ids...)
	return ou
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (ou *OrderUpdate) RemoveCustomer(c ...*Customer) *OrderUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveCustomerIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearOrderItems() *OrderUpdate {
	ou.mutation.ClearOrderItems()
	return ou
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveOrderItemIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveOrderItemIDs(ids...)
	return ou
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderItemIDs(ids...)
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (ou *OrderUpdate) ClearPayments() *OrderUpdate {
	ou.mutation.ClearPayments()
	return ou
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (ou *OrderUpdate) RemovePaymentIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemovePaymentIDs(ids...)
	return ou
}

// RemovePayments removes "payments" edges to Payment entities.
func (ou *OrderUpdate) RemovePayments(p ...*Payment) *OrderUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePaymentIDs(ids...)
}

// ClearProcessedBy clears all "processed_by" edges to the StaffMember entity.
func (ou *OrderUpdate) ClearProcessedBy() *OrderUpdate {
	ou.mutation.ClearProcessedBy()
	return ou
}

// RemoveProcessedByIDs removes the "processed_by" edge to StaffMember entities by IDs.
func (ou *OrderUpdate) RemoveProcessedByIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveProcessedByIDs(ids...)
	return ou
}

// RemoveProcessedBy removes "processed_by" edges to StaffMember entities.
func (ou *OrderUpdate) RemoveProcessedBy(s ...*StaffMember) *OrderUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.RemoveProcessedByIDs(ids...)
}

// ClearCompany clears the "company" edge to the Company entity.
func (ou *OrderUpdate) ClearCompany() *OrderUpdate {
	ou.mutation.ClearCompany()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.BalanceDue(); ok {
		if err := order.BalanceDueValidator(v); err != nil {
			return &ValidationError{Name: "balance_due", err: fmt.Errorf(`ent: validator failed for field "Order.balance_due": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.BalanceDue(); ok {
		_spec.SetField(order.FieldBalanceDue, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedBalanceDue(); ok {
		_spec.AddField(order.FieldBalanceDue, field.TypeFloat64, value)
	}
	if ou.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: order.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !ou.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: order.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: order.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: order.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: order.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: order.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.PaymentsTable,
			Columns: order.PaymentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !ou.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.PaymentsTable,
			Columns: order.PaymentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.PaymentsTable,
			Columns: order.PaymentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ProcessedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.ProcessedByTable,
			Columns: order.ProcessedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedProcessedByIDs(); len(nodes) > 0 && !ou.mutation.ProcessedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.ProcessedByTable,
			Columns: order.ProcessedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProcessedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.ProcessedByTable,
			Columns: order.ProcessedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetBalanceDue sets the "balance_due" field.
func (ouo *OrderUpdateOne) SetBalanceDue(f float64) *OrderUpdateOne {
	ouo.mutation.ResetBalanceDue()
	ouo.mutation.SetBalanceDue(f)
	return ouo
}

// SetNillableBalanceDue sets the "balance_due" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBalanceDue(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetBalanceDue(*f)
	}
	return ouo
}

// AddBalanceDue adds f to the "balance_due" field.
func (ouo *OrderUpdateOne) AddBalanceDue(f float64) *OrderUpdateOne {
	ouo.mutation.AddBalanceDue(f)
	return ouo
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (ouo *OrderUpdateOne) AddCustomerIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddCustomerIDs(ids...)
	return ouo
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (ouo *OrderUpdateOne) AddCustomer(c ...*Customer) *OrderUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddCustomerIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddOrderItemIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddOrderItemIDs(ids...)
	return ouo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderItemIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (ouo *OrderUpdateOne) AddPaymentIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddPaymentIDs(ids...)
	return ouo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (ouo *OrderUpdateOne) AddPayments(p ...*Payment) *OrderUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPaymentIDs(ids...)
}

// AddProcessedByIDs adds the "processed_by" edge to the StaffMember entity by IDs.
func (ouo *OrderUpdateOne) AddProcessedByIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddProcessedByIDs(ids...)
	return ouo
}

// AddProcessedBy adds the "processed_by" edges to the StaffMember entity.
func (ouo *OrderUpdateOne) AddProcessedBy(s ...*StaffMember) *OrderUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.AddProcessedByIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ouo *OrderUpdateOne) SetCompanyID(id int) *OrderUpdateOne {
	ouo.mutation.SetCompanyID(id)
	return ouo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCompanyID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCompanyID(*id)
	}
	return ouo
}

// SetCompany sets the "company" edge to the Company entity.
func (ouo *OrderUpdateOne) SetCompany(c *Company) *OrderUpdateOne {
	return ouo.SetCompanyID(c.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (ouo *OrderUpdateOne) ClearCustomer() *OrderUpdateOne {
	ouo.mutation.ClearCustomer()
	return ouo
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (ouo *OrderUpdateOne) RemoveCustomerIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveCustomerIDs(ids...)
	return ouo
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (ouo *OrderUpdateOne) RemoveCustomer(c ...*Customer) *OrderUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveCustomerIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearOrderItems() *OrderUpdateOne {
	ouo.mutation.ClearOrderItems()
	return ouo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderItemIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveOrderItemIDs(ids...)
	return ouo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderItemIDs(ids...)
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (ouo *OrderUpdateOne) ClearPayments() *OrderUpdateOne {
	ouo.mutation.ClearPayments()
	return ouo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (ouo *OrderUpdateOne) RemovePaymentIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemovePaymentIDs(ids...)
	return ouo
}

// RemovePayments removes "payments" edges to Payment entities.
func (ouo *OrderUpdateOne) RemovePayments(p ...*Payment) *OrderUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePaymentIDs(ids...)
}

// ClearProcessedBy clears all "processed_by" edges to the StaffMember entity.
func (ouo *OrderUpdateOne) ClearProcessedBy() *OrderUpdateOne {
	ouo.mutation.ClearProcessedBy()
	return ouo
}

// RemoveProcessedByIDs removes the "processed_by" edge to StaffMember entities by IDs.
func (ouo *OrderUpdateOne) RemoveProcessedByIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveProcessedByIDs(ids...)
	return ouo
}

// RemoveProcessedBy removes "processed_by" edges to StaffMember entities.
func (ouo *OrderUpdateOne) RemoveProcessedBy(s ...*StaffMember) *OrderUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.RemoveProcessedByIDs(ids...)
}

// ClearCompany clears the "company" edge to the Company entity.
func (ouo *OrderUpdateOne) ClearCompany() *OrderUpdateOne {
	ouo.mutation.ClearCompany()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.BalanceDue(); ok {
		if err := order.BalanceDueValidator(v); err != nil {
			return &ValidationError{Name: "balance_due", err: fmt.Errorf(`ent: validator failed for field "Order.balance_due": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.BalanceDue(); ok {
		_spec.SetField(order.FieldBalanceDue, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedBalanceDue(); ok {
		_spec.AddField(order.FieldBalanceDue, field.TypeFloat64, value)
	}
	if ouo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: order.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !ouo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: order.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.CustomerTable,
			Columns: order.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: order.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: order.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: order.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.PaymentsTable,
			Columns: order.PaymentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !ouo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.PaymentsTable,
			Columns: order.PaymentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   order.PaymentsTable,
			Columns: order.PaymentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ProcessedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.ProcessedByTable,
			Columns: order.ProcessedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedProcessedByIDs(); len(nodes) > 0 && !ouo.mutation.ProcessedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.ProcessedByTable,
			Columns: order.ProcessedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProcessedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   order.ProcessedByTable,
			Columns: order.ProcessedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
