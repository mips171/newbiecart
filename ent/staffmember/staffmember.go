// Code generated by ent, DO NOT EDIT.

package staffmember

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the staffmember type in the database.
	Label = "staff_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeProcessedOrders holds the string denoting the processed_orders edge name in mutations.
	EdgeProcessedOrders = "processed_orders"
	// Table holds the table name of the staffmember in the database.
	Table = "staff_members"
	// ProcessedOrdersTable is the table that holds the processed_orders relation/edge. The primary key declared below.
	ProcessedOrdersTable = "staff_member_processed_orders"
	// ProcessedOrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	ProcessedOrdersInverseTable = "orders"
)

// Columns holds all SQL columns for staffmember fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldRole,
}

var (
	// ProcessedOrdersPrimaryKey and ProcessedOrdersColumn2 are the table columns denoting the
	// primary key for the processed_orders relation (M2M).
	ProcessedOrdersPrimaryKey = []string{"staff_member_id", "order_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// RoleValidator is a validator for the "role" field. It is called by the builders before save.
	RoleValidator func(string) error
)

// OrderOption defines the ordering options for the StaffMember queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByProcessedOrdersCount orders the results by processed_orders count.
func ByProcessedOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProcessedOrdersStep(), opts...)
	}
}

// ByProcessedOrders orders the results by processed_orders terms.
func ByProcessedOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcessedOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProcessedOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcessedOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProcessedOrdersTable, ProcessedOrdersPrimaryKey...),
	)
}
