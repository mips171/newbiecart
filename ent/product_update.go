// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/cartitem"
	"github.com/mikestefanello/pagoda/ent/orderitem"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/product"
	"github.com/mikestefanello/pagoda/ent/productcategory"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetSku sets the "sku" field.
func (pu *ProductUpdate) SetSku(s string) *ProductUpdate {
	pu.mutation.SetSku(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(s string) *ProductUpdate {
	pu.mutation.SetPrice(s)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(s *string) *ProductUpdate {
	if s != nil {
		pu.SetPrice(*s)
	}
	return pu
}

// SetStockCount sets the "stock_count" field.
func (pu *ProductUpdate) SetStockCount(i int) *ProductUpdate {
	pu.mutation.ResetStockCount()
	pu.mutation.SetStockCount(i)
	return pu
}

// SetNillableStockCount sets the "stock_count" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStockCount(i *int) *ProductUpdate {
	if i != nil {
		pu.SetStockCount(*i)
	}
	return pu
}

// AddStockCount adds i to the "stock_count" field.
func (pu *ProductUpdate) AddStockCount(i int) *ProductUpdate {
	pu.mutation.AddStockCount(i)
	return pu
}

// SetImageURL sets the "image_url" field.
func (pu *ProductUpdate) SetImageURL(s string) *ProductUpdate {
	pu.mutation.SetImageURL(s)
	return pu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableImageURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetImageURL(*s)
	}
	return pu
}

// SetIsActive sets the "is_active" field.
func (pu *ProductUpdate) SetIsActive(b bool) *ProductUpdate {
	pu.mutation.SetIsActive(b)
	return pu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIsActive(b *bool) *ProductUpdate {
	if b != nil {
		pu.SetIsActive(*b)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProductUpdate) SetCreatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (pu *ProductUpdate) AddCartItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddCartItemIDs(ids...)
	return pu
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (pu *ProductUpdate) AddCartItems(c ...*CartItem) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCartItemIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (pu *ProductUpdate) AddOrderItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddOrderItemIDs(ids...)
	return pu
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) AddOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderItemIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the ProductCategory entity by IDs.
func (pu *ProductUpdate) AddCategoryIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddCategoryIDs(ids...)
	return pu
}

// AddCategories adds the "categories" edges to the ProductCategory entity.
func (pu *ProductUpdate) AddCategories(p ...*ProductCategory) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddCategoryIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (pu *ProductUpdate) ClearCartItems() *ProductUpdate {
	pu.mutation.ClearCartItems()
	return pu
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (pu *ProductUpdate) RemoveCartItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveCartItemIDs(ids...)
	return pu
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (pu *ProductUpdate) RemoveCartItems(c ...*CartItem) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCartItemIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) ClearOrderItems() *ProductUpdate {
	pu.mutation.ClearOrderItems()
	return pu
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (pu *ProductUpdate) RemoveOrderItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveOrderItemIDs(ids...)
	return pu
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (pu *ProductUpdate) RemoveOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderItemIDs(ids...)
}

// ClearCategories clears all "categories" edges to the ProductCategory entity.
func (pu *ProductUpdate) ClearCategories() *ProductUpdate {
	pu.mutation.ClearCategories()
	return pu
}

// RemoveCategoryIDs removes the "categories" edge to ProductCategory entities by IDs.
func (pu *ProductUpdate) RemoveCategoryIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveCategoryIDs(ids...)
	return pu
}

// RemoveCategories removes "categories" edges to ProductCategory entities.
func (pu *ProductUpdate) RemoveCategories(p ...*ProductCategory) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	if v, ok := pu.mutation.StockCount(); ok {
		if err := product.StockCountValidator(v); err != nil {
			return &ValidationError{Name: "stock_count", err: fmt.Errorf(`ent: validator failed for field "Product.stock_count": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeString, value)
	}
	if value, ok := pu.mutation.StockCount(); ok {
		_spec.SetField(product.FieldStockCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStockCount(); ok {
		_spec.AddField(product.FieldStockCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ImageURL(); ok {
		_spec.SetField(product.FieldImageURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.SetField(product.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !pu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: product.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: product.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: product.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetSku sets the "sku" field.
func (puo *ProductUpdateOne) SetSku(s string) *ProductUpdateOne {
	puo.mutation.SetSku(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(s string) *ProductUpdateOne {
	puo.mutation.SetPrice(s)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetPrice(*s)
	}
	return puo
}

// SetStockCount sets the "stock_count" field.
func (puo *ProductUpdateOne) SetStockCount(i int) *ProductUpdateOne {
	puo.mutation.ResetStockCount()
	puo.mutation.SetStockCount(i)
	return puo
}

// SetNillableStockCount sets the "stock_count" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStockCount(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetStockCount(*i)
	}
	return puo
}

// AddStockCount adds i to the "stock_count" field.
func (puo *ProductUpdateOne) AddStockCount(i int) *ProductUpdateOne {
	puo.mutation.AddStockCount(i)
	return puo
}

// SetImageURL sets the "image_url" field.
func (puo *ProductUpdateOne) SetImageURL(s string) *ProductUpdateOne {
	puo.mutation.SetImageURL(s)
	return puo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableImageURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetImageURL(*s)
	}
	return puo
}

// SetIsActive sets the "is_active" field.
func (puo *ProductUpdateOne) SetIsActive(b bool) *ProductUpdateOne {
	puo.mutation.SetIsActive(b)
	return puo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIsActive(b *bool) *ProductUpdateOne {
	if b != nil {
		puo.SetIsActive(*b)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProductUpdateOne) SetCreatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (puo *ProductUpdateOne) AddCartItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddCartItemIDs(ids...)
	return puo
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (puo *ProductUpdateOne) AddCartItems(c ...*CartItem) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCartItemIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (puo *ProductUpdateOne) AddOrderItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddOrderItemIDs(ids...)
	return puo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) AddOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderItemIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the ProductCategory entity by IDs.
func (puo *ProductUpdateOne) AddCategoryIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddCategoryIDs(ids...)
	return puo
}

// AddCategories adds the "categories" edges to the ProductCategory entity.
func (puo *ProductUpdateOne) AddCategories(p ...*ProductCategory) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddCategoryIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (puo *ProductUpdateOne) ClearCartItems() *ProductUpdateOne {
	puo.mutation.ClearCartItems()
	return puo
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (puo *ProductUpdateOne) RemoveCartItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveCartItemIDs(ids...)
	return puo
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (puo *ProductUpdateOne) RemoveCartItems(c ...*CartItem) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCartItemIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) ClearOrderItems() *ProductUpdateOne {
	puo.mutation.ClearOrderItems()
	return puo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveOrderItemIDs(ids...)
	return puo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (puo *ProductUpdateOne) RemoveOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderItemIDs(ids...)
}

// ClearCategories clears all "categories" edges to the ProductCategory entity.
func (puo *ProductUpdateOne) ClearCategories() *ProductUpdateOne {
	puo.mutation.ClearCategories()
	return puo
}

// RemoveCategoryIDs removes the "categories" edge to ProductCategory entities by IDs.
func (puo *ProductUpdateOne) RemoveCategoryIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveCategoryIDs(ids...)
	return puo
}

// RemoveCategories removes "categories" edges to ProductCategory entities.
func (puo *ProductUpdateOne) RemoveCategories(p ...*ProductCategory) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveCategoryIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	if v, ok := puo.mutation.StockCount(); ok {
		if err := product.StockCountValidator(v); err != nil {
			return &ValidationError{Name: "stock_count", err: fmt.Errorf(`ent: validator failed for field "Product.stock_count": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeString, value)
	}
	if value, ok := puo.mutation.StockCount(); ok {
		_spec.SetField(product.FieldStockCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStockCount(); ok {
		_spec.AddField(product.FieldStockCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ImageURL(); ok {
		_spec.SetField(product.FieldImageURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.SetField(product.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !puo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: product.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: product.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: product.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
