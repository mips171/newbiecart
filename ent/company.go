// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/company"
)

// Company is the model entity for the Company schema.
type Company struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Name of the person to contact for billing
	BillingContact string `json:"billing_contact,omitempty"`
	// BillingEmail holds the value of the "billing_email" field.
	BillingEmail string `json:"billing_email,omitempty"`
	// BillingPhone holds the value of the "billing_phone" field.
	BillingPhone string `json:"billing_phone,omitempty"`
	// BillingAddress holds the value of the "billing_address" field.
	BillingAddress string `json:"billing_address,omitempty"`
	// Usually government-issued tax ID or business ID such as ABN in Australia
	TaxIdentifier string `json:"tax_identifier,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyQuery when eager-loading is set.
	Edges        CompanyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompanyEdges holds the relations/edges for other nodes in the graph.
type CompanyEdges struct {
	// Customers holds the value of the customers edge.
	Customers []*Customer `json:"customers,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CustomersOrErr returns the Customers value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) CustomersOrErr() ([]*Customer, error) {
	if e.loadedTypes[0] {
		return e.Customers, nil
	}
	return nil, &NotLoadedError{edge: "customers"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Company) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case company.FieldID:
			values[i] = new(sql.NullInt64)
		case company.FieldName, company.FieldBillingContact, company.FieldBillingEmail, company.FieldBillingPhone, company.FieldBillingAddress, company.FieldTaxIdentifier:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Company fields.
func (c *Company) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case company.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case company.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case company.FieldBillingContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_contact", values[i])
			} else if value.Valid {
				c.BillingContact = value.String
			}
		case company.FieldBillingEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_email", values[i])
			} else if value.Valid {
				c.BillingEmail = value.String
			}
		case company.FieldBillingPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_phone", values[i])
			} else if value.Valid {
				c.BillingPhone = value.String
			}
		case company.FieldBillingAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address", values[i])
			} else if value.Valid {
				c.BillingAddress = value.String
			}
		case company.FieldTaxIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_identifier", values[i])
			} else if value.Valid {
				c.TaxIdentifier = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Company.
// This includes values selected through modifiers, order, etc.
func (c *Company) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCustomers queries the "customers" edge of the Company entity.
func (c *Company) QueryCustomers() *CustomerQuery {
	return NewCompanyClient(c.config).QueryCustomers(c)
}

// QueryOrders queries the "orders" edge of the Company entity.
func (c *Company) QueryOrders() *OrderQuery {
	return NewCompanyClient(c.config).QueryOrders(c)
}

// Update returns a builder for updating this Company.
// Note that you need to call Company.Unwrap() before calling this method if this Company
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Company) Update() *CompanyUpdateOne {
	return NewCompanyClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Company entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Company) Unwrap() *Company {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Company is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Company) String() string {
	var builder strings.Builder
	builder.WriteString("Company(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("billing_contact=")
	builder.WriteString(c.BillingContact)
	builder.WriteString(", ")
	builder.WriteString("billing_email=")
	builder.WriteString(c.BillingEmail)
	builder.WriteString(", ")
	builder.WriteString("billing_phone=")
	builder.WriteString(c.BillingPhone)
	builder.WriteString(", ")
	builder.WriteString("billing_address=")
	builder.WriteString(c.BillingAddress)
	builder.WriteString(", ")
	builder.WriteString("tax_identifier=")
	builder.WriteString(c.TaxIdentifier)
	builder.WriteByte(')')
	return builder.String()
}

// Companies is a parsable slice of Company.
type Companies []*Company
