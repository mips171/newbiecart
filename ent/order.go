// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/company"
	"github.com/mikestefanello/pagoda/ent/order"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status order.Status `json:"status,omitempty"`
	// PlacedAt holds the value of the "placed_at" field.
	PlacedAt time.Time `json:"placed_at,omitempty"`
	// BalanceDue holds the value of the "balance_due" field.
	BalanceDue float64 `json:"balance_due,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges          OrderEdges `json:"edges"`
	company_orders *int
	user_orders    *int
	selectValues   sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Customer holds the value of the customer edge.
	Customer []*Customer `json:"customer,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// Payments holds the value of the payments edge.
	Payments []*Payment `json:"payments,omitempty"`
	// ProcessedBy holds the value of the processed_by edge.
	ProcessedBy []*StaffMember `json:"processed_by,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) CustomerOrErr() ([]*Customer, error) {
	if e.loadedTypes[0] {
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[1] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) PaymentsOrErr() ([]*Payment, error) {
	if e.loadedTypes[2] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// ProcessedByOrErr returns the ProcessedBy value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) ProcessedByOrErr() ([]*StaffMember, error) {
	if e.loadedTypes[3] {
		return e.ProcessedBy, nil
	}
	return nil, &NotLoadedError{edge: "processed_by"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[4] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldBalanceDue:
			values[i] = new(sql.NullFloat64)
		case order.FieldID:
			values[i] = new(sql.NullInt64)
		case order.FieldStatus:
			values[i] = new(sql.NullString)
		case order.FieldPlacedAt:
			values[i] = new(sql.NullTime)
		case order.ForeignKeys[0]: // company_orders
			values[i] = new(sql.NullInt64)
		case order.ForeignKeys[1]: // user_orders
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = order.Status(value.String)
			}
		case order.FieldPlacedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field placed_at", values[i])
			} else if value.Valid {
				o.PlacedAt = value.Time
			}
		case order.FieldBalanceDue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance_due", values[i])
			} else if value.Valid {
				o.BalanceDue = value.Float64
			}
		case order.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_orders", value)
			} else if value.Valid {
				o.company_orders = new(int)
				*o.company_orders = int(value.Int64)
			}
		case order.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_orders", value)
			} else if value.Valid {
				o.user_orders = new(int)
				*o.user_orders = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the Order entity.
func (o *Order) QueryCustomer() *CustomerQuery {
	return NewOrderClient(o.config).QueryCustomer(o)
}

// QueryOrderItems queries the "order_items" edge of the Order entity.
func (o *Order) QueryOrderItems() *OrderItemQuery {
	return NewOrderClient(o.config).QueryOrderItems(o)
}

// QueryPayments queries the "payments" edge of the Order entity.
func (o *Order) QueryPayments() *PaymentQuery {
	return NewOrderClient(o.config).QueryPayments(o)
}

// QueryProcessedBy queries the "processed_by" edge of the Order entity.
func (o *Order) QueryProcessedBy() *StaffMemberQuery {
	return NewOrderClient(o.config).QueryProcessedBy(o)
}

// QueryCompany queries the "company" edge of the Order entity.
func (o *Order) QueryCompany() *CompanyQuery {
	return NewOrderClient(o.config).QueryCompany(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("placed_at=")
	builder.WriteString(o.PlacedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("balance_due=")
	builder.WriteString(fmt.Sprintf("%v", o.BalanceDue))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
