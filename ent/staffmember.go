// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/staffmember"
)

// StaffMember is the model entity for the StaffMember schema.
type StaffMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Role holds the value of the "role" field.
	Role staffmember.Role `json:"role,omitempty"`
	// Status holds the value of the "status" field.
	Status staffmember.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StaffMemberQuery when eager-loading is set.
	Edges        StaffMemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StaffMemberEdges holds the relations/edges for other nodes in the graph.
type StaffMemberEdges struct {
	// ProcessedOrders holds the value of the processed_orders edge.
	ProcessedOrders []*Order `json:"processed_orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProcessedOrdersOrErr returns the ProcessedOrders value or an error if the edge
// was not loaded in eager-loading.
func (e StaffMemberEdges) ProcessedOrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[0] {
		return e.ProcessedOrders, nil
	}
	return nil, &NotLoadedError{edge: "processed_orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StaffMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case staffmember.FieldID:
			values[i] = new(sql.NullInt64)
		case staffmember.FieldName, staffmember.FieldEmail, staffmember.FieldPassword, staffmember.FieldRole, staffmember.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StaffMember fields.
func (sm *StaffMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staffmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case staffmember.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sm.Name = value.String
			}
		case staffmember.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				sm.Email = value.String
			}
		case staffmember.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				sm.Password = value.String
			}
		case staffmember.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				sm.Role = staffmember.Role(value.String)
			}
		case staffmember.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sm.Status = staffmember.Status(value.String)
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StaffMember.
// This includes values selected through modifiers, order, etc.
func (sm *StaffMember) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// QueryProcessedOrders queries the "processed_orders" edge of the StaffMember entity.
func (sm *StaffMember) QueryProcessedOrders() *OrderQuery {
	return NewStaffMemberClient(sm.config).QueryProcessedOrders(sm)
}

// Update returns a builder for updating this StaffMember.
// Note that you need to call StaffMember.Unwrap() before calling this method if this StaffMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *StaffMember) Update() *StaffMemberUpdateOne {
	return NewStaffMemberClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the StaffMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *StaffMember) Unwrap() *StaffMember {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: StaffMember is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *StaffMember) String() string {
	var builder strings.Builder
	builder.WriteString("StaffMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("name=")
	builder.WriteString(sm.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(sm.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", sm.Role))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sm.Status))
	builder.WriteByte(')')
	return builder.String()
}

// StaffMembers is a parsable slice of StaffMember.
type StaffMembers []*StaffMember
