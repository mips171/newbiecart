// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/order"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/staffmember"
)

// StaffMemberUpdate is the builder for updating StaffMember entities.
type StaffMemberUpdate struct {
	config
	hooks    []Hook
	mutation *StaffMemberMutation
}

// Where appends a list predicates to the StaffMemberUpdate builder.
func (smu *StaffMemberUpdate) Where(ps ...predicate.StaffMember) *StaffMemberUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetName sets the "name" field.
func (smu *StaffMemberUpdate) SetName(s string) *StaffMemberUpdate {
	smu.mutation.SetName(s)
	return smu
}

// SetEmail sets the "email" field.
func (smu *StaffMemberUpdate) SetEmail(s string) *StaffMemberUpdate {
	smu.mutation.SetEmail(s)
	return smu
}

// SetPassword sets the "password" field.
func (smu *StaffMemberUpdate) SetPassword(s string) *StaffMemberUpdate {
	smu.mutation.SetPassword(s)
	return smu
}

// SetRole sets the "role" field.
func (smu *StaffMemberUpdate) SetRole(s staffmember.Role) *StaffMemberUpdate {
	smu.mutation.SetRole(s)
	return smu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (smu *StaffMemberUpdate) SetNillableRole(s *staffmember.Role) *StaffMemberUpdate {
	if s != nil {
		smu.SetRole(*s)
	}
	return smu
}

// AddProcessedOrderIDs adds the "processed_orders" edge to the Order entity by IDs.
func (smu *StaffMemberUpdate) AddProcessedOrderIDs(ids ...int) *StaffMemberUpdate {
	smu.mutation.AddProcessedOrderIDs(ids...)
	return smu
}

// AddProcessedOrders adds the "processed_orders" edges to the Order entity.
func (smu *StaffMemberUpdate) AddProcessedOrders(o ...*Order) *StaffMemberUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return smu.AddProcessedOrderIDs(ids...)
}

// Mutation returns the StaffMemberMutation object of the builder.
func (smu *StaffMemberUpdate) Mutation() *StaffMemberMutation {
	return smu.mutation
}

// ClearProcessedOrders clears all "processed_orders" edges to the Order entity.
func (smu *StaffMemberUpdate) ClearProcessedOrders() *StaffMemberUpdate {
	smu.mutation.ClearProcessedOrders()
	return smu
}

// RemoveProcessedOrderIDs removes the "processed_orders" edge to Order entities by IDs.
func (smu *StaffMemberUpdate) RemoveProcessedOrderIDs(ids ...int) *StaffMemberUpdate {
	smu.mutation.RemoveProcessedOrderIDs(ids...)
	return smu
}

// RemoveProcessedOrders removes "processed_orders" edges to Order entities.
func (smu *StaffMemberUpdate) RemoveProcessedOrders(o ...*Order) *StaffMemberUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return smu.RemoveProcessedOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *StaffMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *StaffMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *StaffMemberUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *StaffMemberUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *StaffMemberUpdate) check() error {
	if v, ok := smu.mutation.Name(); ok {
		if err := staffmember.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StaffMember.name": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Email(); ok {
		if err := staffmember.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "StaffMember.email": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Role(); ok {
		if err := staffmember.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "StaffMember.role": %w`, err)}
		}
	}
	return nil
}

func (smu *StaffMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(staffmember.Table, staffmember.Columns, sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.Name(); ok {
		_spec.SetField(staffmember.FieldName, field.TypeString, value)
	}
	if value, ok := smu.mutation.Email(); ok {
		_spec.SetField(staffmember.FieldEmail, field.TypeString, value)
	}
	if value, ok := smu.mutation.Password(); ok {
		_spec.SetField(staffmember.FieldPassword, field.TypeString, value)
	}
	if value, ok := smu.mutation.Role(); ok {
		_spec.SetField(staffmember.FieldRole, field.TypeEnum, value)
	}
	if smu.mutation.ProcessedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staffmember.ProcessedOrdersTable,
			Columns: staffmember.ProcessedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedProcessedOrdersIDs(); len(nodes) > 0 && !smu.mutation.ProcessedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staffmember.ProcessedOrdersTable,
			Columns: staffmember.ProcessedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ProcessedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staffmember.ProcessedOrdersTable,
			Columns: staffmember.ProcessedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staffmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// StaffMemberUpdateOne is the builder for updating a single StaffMember entity.
type StaffMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StaffMemberMutation
}

// SetName sets the "name" field.
func (smuo *StaffMemberUpdateOne) SetName(s string) *StaffMemberUpdateOne {
	smuo.mutation.SetName(s)
	return smuo
}

// SetEmail sets the "email" field.
func (smuo *StaffMemberUpdateOne) SetEmail(s string) *StaffMemberUpdateOne {
	smuo.mutation.SetEmail(s)
	return smuo
}

// SetPassword sets the "password" field.
func (smuo *StaffMemberUpdateOne) SetPassword(s string) *StaffMemberUpdateOne {
	smuo.mutation.SetPassword(s)
	return smuo
}

// SetRole sets the "role" field.
func (smuo *StaffMemberUpdateOne) SetRole(s staffmember.Role) *StaffMemberUpdateOne {
	smuo.mutation.SetRole(s)
	return smuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (smuo *StaffMemberUpdateOne) SetNillableRole(s *staffmember.Role) *StaffMemberUpdateOne {
	if s != nil {
		smuo.SetRole(*s)
	}
	return smuo
}

// AddProcessedOrderIDs adds the "processed_orders" edge to the Order entity by IDs.
func (smuo *StaffMemberUpdateOne) AddProcessedOrderIDs(ids ...int) *StaffMemberUpdateOne {
	smuo.mutation.AddProcessedOrderIDs(ids...)
	return smuo
}

// AddProcessedOrders adds the "processed_orders" edges to the Order entity.
func (smuo *StaffMemberUpdateOne) AddProcessedOrders(o ...*Order) *StaffMemberUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return smuo.AddProcessedOrderIDs(ids...)
}

// Mutation returns the StaffMemberMutation object of the builder.
func (smuo *StaffMemberUpdateOne) Mutation() *StaffMemberMutation {
	return smuo.mutation
}

// ClearProcessedOrders clears all "processed_orders" edges to the Order entity.
func (smuo *StaffMemberUpdateOne) ClearProcessedOrders() *StaffMemberUpdateOne {
	smuo.mutation.ClearProcessedOrders()
	return smuo
}

// RemoveProcessedOrderIDs removes the "processed_orders" edge to Order entities by IDs.
func (smuo *StaffMemberUpdateOne) RemoveProcessedOrderIDs(ids ...int) *StaffMemberUpdateOne {
	smuo.mutation.RemoveProcessedOrderIDs(ids...)
	return smuo
}

// RemoveProcessedOrders removes "processed_orders" edges to Order entities.
func (smuo *StaffMemberUpdateOne) RemoveProcessedOrders(o ...*Order) *StaffMemberUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return smuo.RemoveProcessedOrderIDs(ids...)
}

// Where appends a list predicates to the StaffMemberUpdate builder.
func (smuo *StaffMemberUpdateOne) Where(ps ...predicate.StaffMember) *StaffMemberUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *StaffMemberUpdateOne) Select(field string, fields ...string) *StaffMemberUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated StaffMember entity.
func (smuo *StaffMemberUpdateOne) Save(ctx context.Context) (*StaffMember, error) {
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *StaffMemberUpdateOne) SaveX(ctx context.Context) *StaffMember {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *StaffMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *StaffMemberUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *StaffMemberUpdateOne) check() error {
	if v, ok := smuo.mutation.Name(); ok {
		if err := staffmember.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StaffMember.name": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Email(); ok {
		if err := staffmember.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "StaffMember.email": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Role(); ok {
		if err := staffmember.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "StaffMember.role": %w`, err)}
		}
	}
	return nil
}

func (smuo *StaffMemberUpdateOne) sqlSave(ctx context.Context) (_node *StaffMember, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(staffmember.Table, staffmember.Columns, sqlgraph.NewFieldSpec(staffmember.FieldID, field.TypeInt))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StaffMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staffmember.FieldID)
		for _, f := range fields {
			if !staffmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staffmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.Name(); ok {
		_spec.SetField(staffmember.FieldName, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Email(); ok {
		_spec.SetField(staffmember.FieldEmail, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Password(); ok {
		_spec.SetField(staffmember.FieldPassword, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Role(); ok {
		_spec.SetField(staffmember.FieldRole, field.TypeEnum, value)
	}
	if smuo.mutation.ProcessedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staffmember.ProcessedOrdersTable,
			Columns: staffmember.ProcessedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedProcessedOrdersIDs(); len(nodes) > 0 && !smuo.mutation.ProcessedOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staffmember.ProcessedOrdersTable,
			Columns: staffmember.ProcessedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ProcessedOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staffmember.ProcessedOrdersTable,
			Columns: staffmember.ProcessedOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StaffMember{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staffmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
