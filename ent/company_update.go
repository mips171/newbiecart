// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/company"
	"github.com/mikestefanello/pagoda/ent/customer"
	"github.com/mikestefanello/pagoda/ent/order"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetBillingContact sets the "billing_contact" field.
func (cu *CompanyUpdate) SetBillingContact(s string) *CompanyUpdate {
	cu.mutation.SetBillingContact(s)
	return cu
}

// SetBillingEmail sets the "billing_email" field.
func (cu *CompanyUpdate) SetBillingEmail(s string) *CompanyUpdate {
	cu.mutation.SetBillingEmail(s)
	return cu
}

// SetBillingPhone sets the "billing_phone" field.
func (cu *CompanyUpdate) SetBillingPhone(s string) *CompanyUpdate {
	cu.mutation.SetBillingPhone(s)
	return cu
}

// SetBillingAddress sets the "billing_address" field.
func (cu *CompanyUpdate) SetBillingAddress(s string) *CompanyUpdate {
	cu.mutation.SetBillingAddress(s)
	return cu
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (cu *CompanyUpdate) SetTaxIdentifier(s string) *CompanyUpdate {
	cu.mutation.SetTaxIdentifier(s)
	return cu
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cu *CompanyUpdate) AddCustomerIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddCustomerIDs(ids...)
	return cu
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cu *CompanyUpdate) AddCustomers(c ...*Customer) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cu *CompanyUpdate) AddOrderIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the Order entity.
func (cu *CompanyUpdate) AddOrders(o ...*Order) *CompanyUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (cu *CompanyUpdate) ClearCustomers() *CompanyUpdate {
	cu.mutation.ClearCustomers()
	return cu
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (cu *CompanyUpdate) RemoveCustomerIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveCustomerIDs(ids...)
	return cu
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (cu *CompanyUpdate) RemoveCustomers(c ...*Customer) *CompanyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cu *CompanyUpdate) ClearOrders() *CompanyUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cu *CompanyUpdate) RemoveOrderIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to Order entities.
func (cu *CompanyUpdate) RemoveOrders(o ...*Order) *CompanyUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.BillingContact(); ok {
		if err := company.BillingContactValidator(v); err != nil {
			return &ValidationError{Name: "billing_contact", err: fmt.Errorf(`ent: validator failed for field "Company.billing_contact": %w`, err)}
		}
	}
	if v, ok := cu.mutation.BillingEmail(); ok {
		if err := company.BillingEmailValidator(v); err != nil {
			return &ValidationError{Name: "billing_email", err: fmt.Errorf(`ent: validator failed for field "Company.billing_email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.BillingPhone(); ok {
		if err := company.BillingPhoneValidator(v); err != nil {
			return &ValidationError{Name: "billing_phone", err: fmt.Errorf(`ent: validator failed for field "Company.billing_phone": %w`, err)}
		}
	}
	if v, ok := cu.mutation.BillingAddress(); ok {
		if err := company.BillingAddressValidator(v); err != nil {
			return &ValidationError{Name: "billing_address", err: fmt.Errorf(`ent: validator failed for field "Company.billing_address": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.BillingContact(); ok {
		_spec.SetField(company.FieldBillingContact, field.TypeString, value)
	}
	if value, ok := cu.mutation.BillingEmail(); ok {
		_spec.SetField(company.FieldBillingEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.BillingPhone(); ok {
		_spec.SetField(company.FieldBillingPhone, field.TypeString, value)
	}
	if value, ok := cu.mutation.BillingAddress(); ok {
		_spec.SetField(company.FieldBillingAddress, field.TypeString, value)
	}
	if value, ok := cu.mutation.TaxIdentifier(); ok {
		_spec.SetField(company.FieldTaxIdentifier, field.TypeString, value)
	}
	if cu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !cu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrdersTable,
			Columns: []string{company.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrdersTable,
			Columns: []string{company.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrdersTable,
			Columns: []string{company.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetBillingContact sets the "billing_contact" field.
func (cuo *CompanyUpdateOne) SetBillingContact(s string) *CompanyUpdateOne {
	cuo.mutation.SetBillingContact(s)
	return cuo
}

// SetBillingEmail sets the "billing_email" field.
func (cuo *CompanyUpdateOne) SetBillingEmail(s string) *CompanyUpdateOne {
	cuo.mutation.SetBillingEmail(s)
	return cuo
}

// SetBillingPhone sets the "billing_phone" field.
func (cuo *CompanyUpdateOne) SetBillingPhone(s string) *CompanyUpdateOne {
	cuo.mutation.SetBillingPhone(s)
	return cuo
}

// SetBillingAddress sets the "billing_address" field.
func (cuo *CompanyUpdateOne) SetBillingAddress(s string) *CompanyUpdateOne {
	cuo.mutation.SetBillingAddress(s)
	return cuo
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (cuo *CompanyUpdateOne) SetTaxIdentifier(s string) *CompanyUpdateOne {
	cuo.mutation.SetTaxIdentifier(s)
	return cuo
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (cuo *CompanyUpdateOne) AddCustomerIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddCustomerIDs(ids...)
	return cuo
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (cuo *CompanyUpdateOne) AddCustomers(c ...*Customer) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cuo *CompanyUpdateOne) AddOrderIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (cuo *CompanyUpdateOne) AddOrders(o ...*Order) *CompanyUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (cuo *CompanyUpdateOne) ClearCustomers() *CompanyUpdateOne {
	cuo.mutation.ClearCustomers()
	return cuo
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (cuo *CompanyUpdateOne) RemoveCustomerIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveCustomerIDs(ids...)
	return cuo
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (cuo *CompanyUpdateOne) RemoveCustomers(c ...*Customer) *CompanyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cuo *CompanyUpdateOne) ClearOrders() *CompanyUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cuo *CompanyUpdateOne) RemoveOrderIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (cuo *CompanyUpdateOne) RemoveOrders(o ...*Order) *CompanyUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.BillingContact(); ok {
		if err := company.BillingContactValidator(v); err != nil {
			return &ValidationError{Name: "billing_contact", err: fmt.Errorf(`ent: validator failed for field "Company.billing_contact": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.BillingEmail(); ok {
		if err := company.BillingEmailValidator(v); err != nil {
			return &ValidationError{Name: "billing_email", err: fmt.Errorf(`ent: validator failed for field "Company.billing_email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.BillingPhone(); ok {
		if err := company.BillingPhoneValidator(v); err != nil {
			return &ValidationError{Name: "billing_phone", err: fmt.Errorf(`ent: validator failed for field "Company.billing_phone": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.BillingAddress(); ok {
		if err := company.BillingAddressValidator(v); err != nil {
			return &ValidationError{Name: "billing_address", err: fmt.Errorf(`ent: validator failed for field "Company.billing_address": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BillingContact(); ok {
		_spec.SetField(company.FieldBillingContact, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BillingEmail(); ok {
		_spec.SetField(company.FieldBillingEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BillingPhone(); ok {
		_spec.SetField(company.FieldBillingPhone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BillingAddress(); ok {
		_spec.SetField(company.FieldBillingAddress, field.TypeString, value)
	}
	if value, ok := cuo.mutation.TaxIdentifier(); ok {
		_spec.SetField(company.FieldTaxIdentifier, field.TypeString, value)
	}
	if cuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !cuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.CustomersTable,
			Columns: []string{company.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrdersTable,
			Columns: []string{company.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrdersTable,
			Columns: []string{company.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.OrdersTable,
			Columns: []string{company.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
